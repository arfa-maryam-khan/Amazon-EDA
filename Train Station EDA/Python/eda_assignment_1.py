# -*- coding: utf-8 -*-
"""EDA Assignment 1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MWotASAI3f1120nfe-AKXG7dLXeM9ft7
"""

import pandas as pd

df = pd.read_csv('/content/EDA-assignment.csv')

"""# First 15 values from dataset"""

df.head(15)

"""# shape of the dataset"""

print("Shape of the DataFrame:", df.shape)

"""# data types of all columns"""

print("\nData types of each column:")
print(df.info())

"""# numerical and categorical features"""

print("Descriptive statistics for numerical and categorical columns:")
display(df.describe())
display(df.describe(include= "O"))

"""# Columns"""

df.columns

"""# Unique values for each column"""

# Unique values in categorical columns
print("\nUnique values in categorical columns:")
for col in ['gender', 'city']:  # Example categorical columns
    print(f"\nColumn '{col}':")
    print(df[col].unique())
    print(df[col].value_counts())

for col in df.columns:
    print(f"\nColumn '{col}':")
    print(f"Count of unique values: {df[col].nunique()}")
    print("---------------------------------------------")

"""# duplicated rows or columns"""

df.duplicated()

for col in df.columns:
    print(f"\nColumn '{col}':")
    print(f"Is the column unique: {df[col].is_unique}")
    print("---------------------------------------------")

"""# unique entries for categorical fields"""

columns = ['gender', 'city']
for col in columns:
    print(f'Unique values in {col} are {df[col].unique()} with count {df[col].nunique()}')

"""# missing values in the dataset

Age and days_on_platform are the fields that contain missing values.
Age has around 50% missing data while Days on Platform has 2% missing data.
"""

df.isnull().sum()

for col in df.columns:
    print(f"\nColumn '{col}':")
    print(f"Missing Values: {df[col].isnull().sum()}")
    print(f"Missing Values Percentage: {(df[col].isnull().sum()/len(df))*100}")
    print("---------------------------------------------")

"""# Strategy to deal with missing values
To deal with missing values, I used Median of the column value for Age as Age has a median of 30 and mode of 49. The chart was highest for 40+ age then second highest was < 15 and the thirsd was around 25-30. So, I used median.

As for days_on_platform field, I used mode as median was showing much higher value i.e. 21 days while mode showed 7 days. Also, the graph ws left skewed. Therefore, I used mode.

"""

print('Median of age:', df['age'].median())
print('Mode of age:', df['age'].mode())
print('Mean of age:', df['age'].mean())

plt.figure(figsize=(5,3))
sns.histplot(df['age'].dropna(), kde=True)

print('Median of days_on_platform:', df['days_on_platform'].median())
print('Mode of days_on_platform:', df['days_on_platform'].mode())
print('Mean of days_on_platform:', df['days_on_platform'].mean())

plt.figure(figsize=(5,3))
sns.histplot(df['days_on_platform'].dropna(), kde=True)

df['age'].fillna(df['age'].median(), inplace=True)
df['days_on_platform'].fillna(df['days_on_platform'].mode()[0], inplace=True)
df.isnull().sum()

"""# Outliers
Income, Days on Platform and Purchases are the three fields that contained outliers.
"""

import matplotlib.pyplot as plt
import seaborn as sns

for col in df:
  plt.figure(figsize=(8,5))
  sns.boxplot(x=df[col])

plt.figure(figsize=(6,3))
for col in df:
  print(col)
  plt.hist(x=df[col])
  plt.show()

# Histograms for 'purchases' and 'days_on_platform' and 'income'
plt.figure(figsize=(13, 5))

plt.subplot(2, 3, 1)
sns.histplot(df['purchases'].dropna(), kde=True)
plt.title('Distribution of purchases')

plt.subplot(2, 3, 2)
sns.histplot(df['days_on_platform'].dropna(), kde=True)
plt.title('Distribution of days_on_platform')

plt.subplot(2, 3, 3)
sns.histplot(df['income'].dropna(), kde=True)
plt.title('Distribution of income')

plt.show()

# Box plots for 'purchases' and 'days_on_platform' and 'income'
plt.figure(figsize=(18, 9))

plt.subplot(2, 3, 1)
sns.boxplot(y=df['purchases'])
plt.title('Distribution of purchases')

plt.subplot(2, 3, 2)
sns.boxplot(y=df['days_on_platform'])
plt.title('Distribution of days_on_platform')

plt.subplot(2, 3, 3)
sns.boxplot(y=df['income'])
plt.title('Distribution of income')

plt.show()

# Bar charts for categorical features
plt.figure(figsize=(12, 9))

plt.subplot(1, 2, 1)
sns.countplot(x='gender', data=df)
plt.title('gender')

plt.subplot(1, 2, 2)
sns.countplot(x='city', data=df)
plt.title('city')

"""# Strategy for Outliers
We have outliers for
*   Purchases
*   Income
*   Days On Platform

for purchases, as there were only 10 records with 6 purhcases, I didn't change it.

for Days On Platform, I capped at 70 as the the IQR gave a ~71.5 as upper bound, so, I capped at 70.

for Income, I capped at 275K as the the IQR gave a ~263K as upper bound. And there were around 50 people falling in 275K block in histogram so, I capped at 275K. Capped minimum at 1200 as minimum value in df was 4 and there were a number of values less than 1200.




"""

import numpy as np
df['days_on_platform'] = np.clip(df['days_on_platform'], a_min=None, a_max=70)
df['income'] = np.clip(df['income'], a_min=1200, a_max=275000)

"""# Assumptions made during cleaning
*   Capped income at 275K to capture accurate data for most people
*   Days on platform went as high as 100+ but majorly the days went as high as 70 so, capped to 70 days
*   For purchases, as there were only 10 people who made 6 purchases so did not change that
*   Used Median for Age to fill null values
*   Used Mode for Days on platform to fill null values

# Describing the dataset
*   **Age** distribution is fairly symmetrical with age ranging from 10-50 so mosyly young to middle aged adults
*   **Income** is right skewed with large standard deviation
*   **Days on Platform** is not too much skewed but the spread is huge ranging from 1 day to 70 days (capped)
*   **Purchases** most users have 1 purchase only with skewing left.
"""

df.describe()

"""# Min, Max and Avg values for income and age"""

cols = ['income', 'age']
for col in cols:
  print(f"Minimum value of column {col}: {df[col].min()}")
  print(f"Maximum value of column {col}: {df[col].max()}")
  print(f"Average value of column {col}: {df[col].mean()}")

"""# purchases column distribution

Most purchases are 0-1 with a very slight number of people making 6 purchses
The spread is left skewed with 6 as extreme value
"""

sns.boxplot(y=df['purchases'])
plt.title('Distribution of purchases')
plt.show()

plt.hist(df['purchases'])
plt.title('Spread of purchases')

plt.show()

"""# percentage of users who made zero purchases"""

zero_purchase_users = df[df['purchases'] == 0]
print(f"Percentage of customers who made zero purchases is: {(len(zero_purchase_users)/len(df))*100}")

"""# Range of Values in Days on Platform

the days on platform ranged from 1 to more than 100 which was capped at 70. Most people spent < 10 days on platform. The graph showed a step by step decrement in the number of users by days spent on platform.

the range shows that for some users have been on platform for a long time while other just stayed for a brief time.
"""

sns.boxplot(y=df['days_on_platform'])
plt.title('Distribution of days_on_platform')
plt.show()

plt.hist(df['days_on_platform'])
plt.title('Spread of days_on_platform')

plt.show()

"""# Group the data by gender"""

gender_summary = df.groupby('gender').agg({
    'income': 'mean',  # Mean of income for each gender
    'purchases': 'mean',     # Mean of purchases for each gender
})
print("\nSummary by Gender:")
display(gender_summary)

"""# Age bins

Highest average purchases are by middle aged adults i.e 31-40 years old
"""

bins=[10, 20, 30, 40, 50]
labels=['10-20', '21-30', '31-40', '41-50']
df['age_group'] = pd.cut(df['age'], bins=bins, labels=labels, right=True)

avg_purchases_by_age = df.groupby('age_group')['purchases'].mean()
avg_purchases_by_age

"""# Group by city
Most users were from Tokyo with 23 days.
Highest Average days on platform was for Miami with 24 days.
"""

city_summary = df.groupby('city').agg({
    'id': 'size',  # Mean of income for each city
    'days_on_platform': 'mean',     # Mean of purchases for each city
})
print("\nSummary by City:")
display(city_summary)

"""# Group the data by city and gender

*  Females from San Francisco spent most days on platform
*  Females from New York City with highest avg income spent the least days on platform
"""

city_gender_summary = df.groupby(['city','gender']).agg({
    'purchases': 'mean',     # Mean of purchases for each gender
    'income': 'mean',
    'days_on_platform': 'mean'
    })
print("\nSummary by city and Gender:")
display(city_gender_summary)

"""# highest purchase activity by age bin and gender

31-40	aged Females have highest purchase activity i.e.	1.189286
"""

bin_gender_summary = df.groupby(['age_group', 'gender']).agg({
    'purchases': 'mean',     # Max of purchases for each gender
})
print("\nSummary by Age Bin and Gender:")
display(bin_gender_summary)

"""# top factors influencing purchases
*   Females aged 31-40 make the most purchases on average (1.19), suggesting this is the most valuable demographic segment in terms of purchase behavior
*  New York City users have the highest average purchases across all cities. This could indicate stronger engagement in NYC.
*  Males purchase slightly more than females on average, but the difference (0.04) is minor and may not be practically significant on its own.



"""

age_group_summary = df.groupby(['age_group', 'gender'])['purchases'].mean().sort_values(ascending=False)
print("\nSummary by Age group and gender:")
display(age_group_summary)

city_summary = df.groupby(['city'])['purchases'].mean().sort_values(ascending=False)
print("\nSummary by City:")
display(city_summary)

gender_summary = df.groupby(['gender'])['purchases'].mean().sort_values(ascending=False)
print("\nSummary by Gender:")
display(gender_summary)

"""# Do users with higher income consistently make more purchases?

As correlation is small, we cannot deduce if more income means more purchases.
"""

df['income'].corr(df['purchases'])

sns.scatterplot(x='income', y='purchases', data=df)

"""# Does time spent on the platform relate to purchase behavior?

As correlation is negative, we cannot say more time spent on platform means more purchases made.
"""

df['days_on_platform'].corr(df['purchases'])

sns.scatterplot(x='days_on_platform', y='purchases', data=df)

"""# Are there any noticeable patterns based on gender or location?

*  Males made most purchases.
*  New York had most purchases with Miami follwing closely.
*  But combined New York City  Male made average purchases.
*  New York City Females made most purchases
*  Miami Males made second highest purchases
"""

gender_avg = df.groupby('gender')['purchases'].mean()
print(gender_avg)

city_avg = df.groupby('city')['purchases'].mean()
print(city_avg)

gender_city_avg = df.groupby(['city', 'gender'])['purchases'].mean().sort_values(ascending=False)
print(gender_city_avg)

"""# one strategy the platform can use to increase purchases.

Most purchases are from Males in Miami and Females in New York cities. So we can utilize this and offer personalized promotions and targeted campaigns to these groups.
"""