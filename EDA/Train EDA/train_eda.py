# -*- coding: utf-8 -*-
"""Train EDA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1M5ONB0wd5Dxt_6q3oymq-h7pinIyNqgO
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

df = pd.read_csv('/content/train.csv')

df.shape

df.head(5)

df.describe(include=object)
#9800 rows

"""No Unique Identifier from categorical columns
We can use Row Id

Country has just a single value so no variance. we can drop it.

Postal code is float and has 1 missing value so gonna update that

date column needs datatype to be updated
"""

df.describe()

df["Row ID"].nunique()
#primary-- Unique identifier

df["Row ID"].duplicated().sum()

df.info()

df['Postal Code'].value_counts()
# df['Postal Code'].nunique()

df.loc[df['Postal Code'].isnull()]

"""postal code is categorical data"""

df['Postal Code'] = df['Postal Code'].fillna(df['Postal Code'].mode()[0])
df.isnull().sum()

# Convert data types to datetime
df['Order Date'] = pd.to_datetime(df['Order Date'], format='%d/%m/%Y')
df['Ship Date'] = pd.to_datetime(df['Ship Date'], format='%d/%m/%Y')

# Drop columns
df = df.drop(['Row ID'],axis=1)

# Sort values by order date
df.sort_values('Order Date', ascending=True, inplace=True)

df

df = df.astype({"Postal Code": int})

"""Sales Performance Analysis

How are the sales trending over time? Are there any noticeable seasonal patterns?
"""

df.info()

df['Order Date'].dt.to_period('M')

from matplotlib.dates import MonthLocator, DateFormatter

df['Month'] = df['Order Date'].dt.to_period('M').dt.to_timestamp()
monthly_sales = df.groupby('Month')['Sales'].sum().reset_index()

display(monthly_sales)

plt.figure(figsize=(14,7))
plt.plot(monthly_sales['Month'], monthly_sales['Sales'],marker='o')

plt.gca().xaxis.set_major_locator(MonthLocator(interval=1))   # show every month
plt.gca().xaxis.set_major_formatter(DateFormatter('%b %Y'))  # format as 'Jan 2020'

#line chart for monthly sales
plt.xlabel("Month")        # Label for the X-axis
plt.ylabel("Sales")        # Label for the Y-axis
plt.title("Monthly Sales")  # Chart title
plt.xticks(rotation=45)  # Rotate labels for readability
plt.grid(True)

plt.show()

df['Quarter'] = df['Order Date'].dt.to_period('Q').dt.to_timestamp()
quarterly_sales = df.groupby('Quarter')['Sales'].sum().reset_index()

display(quarterly_sales)

plt.figure(figsize=(14,7))
plt.plot(quarterly_sales['Quarter'], quarterly_sales['Sales'],marker='o')

# plt.gca().xaxis.set_major_locator(MonthLocator(interval=1))   # show every month
# plt.gca().xaxis.set_major_formatter(DateFormatter('%b %Y'))  # format as 'Jan 2020'

#line chart for Quarterly sales
plt.xlabel("Quarter")        # Label for the X-axis
plt.ylabel("Sales")        # Label for the Y-axis
plt.title("Quarterly Sales")  # Chart title
plt.xticks(rotation=45)  # Rotate labels for readability
plt.grid(True)

plt.show()

"""Which ship mode is most frequently chosen by customers?"""

df['Ship Mode'].value_counts()

ship_mode_df = df.groupby('Ship Mode').agg(
    Sales_Sum=('Sales', 'sum'),
    Sales_Count=('Sales', 'count'),
    Sales_Mean=('Sales', 'mean')
    ).reset_index()
display(ship_mode_df)

plt.pie(ship_mode_df['Sales_Sum'], labels=ship_mode_df['Ship Mode'], autopct='%1.2f%%',
        startangle=235, wedgeprops={'edgecolor':'black','linewidth':0.5})
plt.title('Ship Modes Chosen by Customers')
plt.tight_layout()
plt.show()


plt.pie(ship_mode_df['Sales_Count'], labels=ship_mode_df['Ship Mode'], autopct='%1.2f%%',
        startangle=235, wedgeprops={'edgecolor':'black','linewidth':0.5})
plt.title('Ship Modes Chosen by Customers')
plt.tight_layout()
plt.show()

"""What are the top-selling products or categories?"""

category_df = df.groupby('Category').agg(
    Sales_Sum=('Sales', 'sum'),
    Sales_Count=('Sales', 'count'),
    Sales_Mean=('Sales', 'mean')
    ).reset_index()

category_df['Sales_Sum'] = category_df['Sales_Sum'].round()
total_sales = category_df['Sales_Sum'].sum()
category_df['% of Total Sales'] = (category_df['Sales_Sum'] / total_sales * 100).round()
category_df.reset_index(inplace=True)

display(category_df)


explode = [0.05] * len(category_df)

def autopct_format(values):
    def my_format(pct):
        total = sum(values)
        val = int(round(pct * total / 100.0))
        return '${v:d} ({p:.1f}%)'.format(v=val, p=pct)
    return my_format

plt.figure(figsize=(8, 8))
plt.pie(category_df['Sales_Sum'], labels=category_df['Category'],
        explode=explode, autopct=autopct_format(category_df['Sales_Sum']))


circle = plt.Circle((0, 0), 0.65, facecolor='white')
plt.gca().add_artist(circle)


plt.title('Sales Distribution by Category')
plt.tight_layout()
plt.show()

product_df = df.groupby('Product Name').agg({'Sales': 'sum'})
# product_df['Sales'] = product_df['Sales'].round()
product_df['Quantity'] = df['Product Name'].value_counts()
product_df.reset_index(inplace=True)

product_df.sort_values('Sales', ascending=False).head(15)

"""Geographical Insights

Which countries, cities, or states contribute the most to the sales revenue?
"""

top_states = df.groupby('State').agg({'Sales': 'sum'})
top_states['Sales'] = top_states['Sales'].round(1)
top_states.sort_values('Sales', ascending=False, inplace=True)
top_states.reset_index(inplace=True)
top_10_states = top_states.head(10)
display(top_10_states)

plt.figure(figsize=(10,8))
plt.bar(top_10_states['State'], top_10_states['Sales'])
plt.title('Top 10 States by Revenue')
plt.xlabel('States', fontsize=15)
plt.ylabel('Revenue', fontsize=15)
plt.xticks(fontsize=14, rotation=45)
plt.yticks(fontsize=14)
plt.legend()
plt.tight_layout()
plt.show()


bottom_10_states = top_states.tail(10)
display(bottom_10_states)

plt.figure(figsize=(10,8))
plt.bar(bottom_10_states['State'], bottom_10_states['Sales'])
plt.title('Bottom 10 States by Revenue')
plt.xlabel('States', fontsize=15)
plt.ylabel('Revenue', fontsize=15)
plt.xticks(fontsize=14, rotation=45)
plt.yticks(fontsize=14)
plt.legend()
plt.tight_layout()
plt.show()

top_cities = df.groupby('City').agg({'Sales': 'sum'})
top_cities['Sales'] = top_cities['Sales'].round(1)
top_cities.sort_values('Sales', ascending=False, inplace=True)
top_cities.reset_index(inplace=True)
top_10_cities = top_cities.head(10)
display(top_10_states)

plt.figure(figsize=(10,8))
plt.bar(top_10_cities['City'], top_10_cities['Sales'])
plt.title('Top 10 Cities by Revenue')
plt.xlabel('City', fontsize=15)
plt.ylabel('Revenue', fontsize=15)
plt.xticks(fontsize=14, rotation=45)
plt.yticks(fontsize=14)
plt.legend()
plt.tight_layout()
plt.show()


bottom_10_cities = top_cities.tail(10)
display(bottom_10_cities)

plt.figure(figsize=(10,8))
plt.bar(bottom_10_cities['City'], bottom_10_cities['Sales'])
plt.title('Bottom 10 Cities by Revenue')
plt.xlabel('City', fontsize=15)
plt.ylabel('Revenue', fontsize=15)
plt.xticks(fontsize=14, rotation=45)
plt.yticks(fontsize=14)
plt.legend()
plt.tight_layout()
plt.show()

df.Region.unique()

"""Are there any specific regions where sales are consistently lower? What factors might be contributing to this?"""

west_df = df.loc[df['Region'] == 'West']
east_df = df.loc[df['Region'] == 'East']
south_df = df.loc[df['Region'] == 'South']
central_df = df.loc[df['Region'] == 'Central']

west_monthly_sales = west_df.groupby(west_df['Order Date'].dt.to_period('M').dt.to_timestamp()).agg({
      'Sales': 'sum'})
east_monthly_sales = east_df.groupby(east_df['Order Date'].dt.to_period('M').dt.to_timestamp()).agg({
      'Sales': 'sum'})
south_monthly_sales = south_df.groupby(south_df['Order Date'].dt.to_period('M').dt.to_timestamp()).agg({
      'Sales': 'sum'})
central_monthly_sales = central_df.groupby(central_df['Order Date'].dt.to_period('M').dt.to_timestamp()).agg({
      'Sales': 'sum'})

global_min = min(west_monthly_sales['Sales'].min(), east_monthly_sales['Sales'].min(),
                 south_monthly_sales['Sales'].min(), central_monthly_sales['Sales'].min())
global_max = max(west_monthly_sales['Sales'].max(), east_monthly_sales['Sales'].max(),
                 south_monthly_sales['Sales'].max(), central_monthly_sales['Sales'].max())

fig, (ax_west, ax_east, ax_south, ax_central) = plt.subplots(nrows=4, ncols=1, figsize=(12, 20))


ax_west.plot(west_monthly_sales.index, west_monthly_sales.values, marker='o', linestyle='-')
ax_east.plot(east_monthly_sales.index, east_monthly_sales.values, marker='o', linestyle='-')
ax_south.plot(south_monthly_sales.index, south_monthly_sales.values, marker='o', linestyle='-')
ax_central.plot(central_monthly_sales.index, central_monthly_sales.values, marker='o', linestyle='-')


ax_west.set_ylim(global_min, global_max)
ax_east.set_ylim(global_min, global_max)
ax_south.set_ylim(global_min, global_max)
ax_central.set_ylim(global_min, global_max)

ax_west.set_title('West Region Monthly Sales')
ax_east.set_title('East Region Monthly Sales')
ax_south.set_title('South Region Monthly Sales')
ax_central.set_title('Central Region Monthly Sales')

ax_west.set_ylabel('Total Sales ($)')
ax_central.set_xlabel('Months')


plt.tight_layout()
plt.show()

"""Product Analysis

Are there specific products or sub-categories that are driving the majority of sales?
"""

product_top_10_amount = df.groupby('Product Name').agg({'Sales': 'sum'})
product_top_10_amount['Quantity'] = df['Product Name'].value_counts()
product_top_10_amount.reset_index(inplace=True)

product_top_10_quantity = product_top_10_amount.sort_values('Quantity', ascending=False).head(10)
display(product_top_10_quantity)

plt.figure(figsize=(10, 6))
plt.bar(product_top_10_quantity['Product Name'], product_top_10_quantity['Quantity'])
plt.title('Top 10 Products by Quantity Sold')
plt.xlabel('Product Name')
plt.ylabel('Quantity')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

product_top_10_sales = product_top_10_quantity.sort_values('Sales', ascending=False)
display(product_top_10_sales)

# Plotting Bar Chart for Top 10 Products by Sales (ordered)
plt.figure(figsize=(10, 6))
plt.bar(product_top_10_sales['Product Name'], product_top_10_sales['Sales'])
plt.title('Top 10 Products by Sales (Ordered)')
plt.xlabel('Product Name')
plt.ylabel('Sales ($)')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

plt.figure(figsize=(10,6))

plt.bar(df['Sub-Category'].value_counts().index, df['Sub-Category'].value_counts())

plt.title('Top Selling Sub Category')
plt.xlabel('Sub Categories')
plt.ylabel('Quantity')
plt.xticks(rotation=70)

plt.tight_layout()
plt.show()

"""Are there product categories that are gaining or losing popularity among customers over time?"""

office_supplies_df = df.loc[df['Category'] == 'Office Supplies'].copy()
technology_df = df.loc[df['Category'] == 'Technology'].copy()
furniture_df = df.loc[df['Category'] == 'Furniture'].copy()
office_supplies_df['Quantity'] = technology_df['Quantity'] = furniture_df['Quantity'] = 1

monthly_office_supplies = office_supplies_df.groupby(office_supplies_df['Order Date'].dt.to_period('M').dt.to_timestamp()).agg({
      'Quantity': 'sum'})
monthly_technology = technology_df.groupby(technology_df['Order Date'].dt.to_period('M').dt.to_timestamp()).agg({
      'Quantity': 'sum'})
monthly_furniture = furniture_df.groupby(furniture_df['Order Date'].dt.to_period('M').dt.to_timestamp()).agg({
      'Quantity': 'sum'})

global_min = min(monthly_office_supplies['Quantity'].min(), monthly_technology['Quantity'].min(), monthly_furniture['Quantity'].min())
global_max = max(monthly_office_supplies['Quantity'].max(), monthly_technology['Quantity'].max(), monthly_furniture['Quantity'].max())

fig, (ax_off, ax_tech, ax_fur) = plt.subplots(nrows=3, ncols=1, figsize=(8,10))

ax_off.plot(monthly_office_supplies.index, monthly_office_supplies.values, marker='o', linestyle='-')
ax_tech.plot(monthly_technology.index, monthly_technology.values, marker='o', linestyle='-')
ax_fur.plot(monthly_furniture.index, monthly_furniture.values, marker='o', linestyle='-')


ax_off.set_ylim(global_min, global_max)
ax_tech.set_ylim(global_min, global_max)
ax_fur.set_ylim(global_min, global_max)


ax_off.set_title('Office Products Sales Quantities by Month')
ax_tech.set_title('Technology Products Sales Quantities by Month')
ax_fur.set_title('Furniture Products Sales Quantities by Month')

ax_off.set_ylabel('Quantity')
ax_fur.set_xlabel('Months')

fig.tight_layout(pad=3.0)

plt.show()

"""Order Processing Efficiency

Are there specific shipping modes that tend to have quicker or slower processing times?
"""

df['Processing Time'] = (df['Ship Date'] - df['Order Date']).dt.days

for unique in df['Ship Mode'].unique():
    print(unique.upper())
    print('Mean processing day' + ': ' +
          str(round(df.loc[df['Ship Mode'] == unique]['Processing Time'].mean())))
    print('Max processing day: ' + str(df.loc[df['Ship Mode'] == unique]['Processing Time'].max()))
    print('Min processing day: ' + str(df.loc[df['Ship Mode'] == unique]['Processing Time'].min()))
    print('\n')