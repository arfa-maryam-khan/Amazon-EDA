# -*- coding: utf-8 -*-
"""Cleaning Data Inconsistency

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1y088H7pJncqoft9NiWEl4xY8s3zpH_tY

## Get our environment set up

The first thing we'll need to do is load in the libraries and dataset we'll be using.
"""

!pip install fuzzywuzzy

import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

# modules we'll use
import pandas as pd
import numpy as np

# helpful modules
import fuzzywuzzy # pip install fuzzywuzzy
from fuzzywuzzy import process

# read in all our data
professors = pd.read_csv('/content/pakistan_intellectual_capital.csv')
professors

professors.info()

"""## Missing Values"""

professors.isnull().sum()
#1142

# % of missing values in each column
for col in professors.columns:
    pct_missing = np.mean(professors[col].isnull())
    print('{} - {}%'.format(col, round(pct_missing*100)))

#finding missing values in all columns
#area - remove-- formating type
#year- replace with mode? "replace it" unknown
#other info- remove

professors.drop('Year', axis=1, inplace=True)
professors.drop('Area of Specialization/Research Interests', axis=1, inplace=True)
professors.drop('Other Information', axis=1, inplace=True)

"""## Fill Missing Values"""

professors['Terminal Degree'].fillna(professors['Terminal Degree'].mode()[0],
                                     inplace=True)

professors['Designation'].fillna(professors['Designation'].mode()[0],
                                     inplace=True)

"""## Duplicates"""

professors['Teacher Name'].nunique()

#duplicates in the data
professors['Teacher Name'].duplicated().sum()

professors['Teacher Name'].duplicated()

professors[professors['Teacher Name'].duplicated()== True]

professors['S#'].nunique()

professors['Unnamed: 0'].nunique()

professors['S#'].duplicated()

professors['S#'].duplicated().sum()

"""## Do some preliminary text pre-processing

We'll begin by taking a quick look at the first few rows of the data.
"""

professors.head(20)

"""## Dropping unnecessary columns"""

professors.drop(['S#', 'Unnamed: 0',"Teacher Name"], axis=1,inplace=True)
professors

professors.info()

professors["Terminal Degree"].value_counts()

for column in professors:
    print("Column"," ",column,"  uniquevalue  are :", professors[column].nunique())
    print(professors[column].unique())
    print("-------------------------")

"""Say we're interested in cleaning up the "Country" column to make sure there's no data entry inconsistencies in it. We could go through and check each row by hand, of course, and hand-correct inconsistencies when we find them. There's a more efficient way to do this, though!

## Checking Data Inconsistencies:
"""

professors['Department'].unique()

# get all the unique values in the 'Country' column
professors['Department']=professors['Department'].str.lower()
departments = professors['Department'].unique()

# sort them alphabetically and then take a closer look
departments.sort()
departments

# get the top 10 closest matches to "CS"
matchesdep = fuzzywuzzy.process.extract("computer sciences", departments, limit=30)

# take a look at them
matchesdep

# get the top 10 closest matches to "south korea"
matchesdep = fuzzywuzzy.process.extract("computer", departments, limit=15)

# take a look at them
matchesdep
#percentage 68%

countries = professors['Country'].str.lower()
unique_countries = countries.unique()

# sort them alphabetically and then take a closer look
unique_countries.sort()
unique_countries

# get the top 10 closest matches to "south korea"
matches = fuzzywuzzy.process.extract("usa", professors['Country'], limit=100)
for match in matches:
  if match[1]>=75:
    print(match)

# get the top 10 closest matches to "south korea"
matches = fuzzywuzzy.process.extract("south korea", countries, limit=15)

# take a look at them
matches

"""## General Purpose Fuzzy Match Function

We can see that two of the items in the cities are very close to "south korea": "south korea" and "southkorea". Let's replace all rows in our "Country" column that have a match of > 95 with "south korea".

To do this, I'm going to write a function. (It's a good idea to write a general purpose function you can reuse if you think you might have to do a specific task more than once or twice. This keeps you from having to copy and paste code too often, which saves time and can help prevent mistakes.)
"""

# function to replace rows in the provided column of the provided dataframe
# that match the provided string above the provided ratio with the provided string
def replace_matches_in_column(df, column, string_to_match, string_to_replace, limit=5, min_match = 95):
    # get a list of unique strings
    strings = df[column].unique()

    # get the top 10 closest matches to our input string
    matches = fuzzywuzzy.process.extract(string_to_match, strings,
                                         limit=limit)

    # only get matches with a ratio > 95
    close_matches = [matches[0] for matches in matches if matches[1] >= min_match]

    # get the rows of all the close matches in our dataframe
    rows_with_matches = df[column].isin(close_matches)

    # replace all rows with close matches with the input matches
    df.loc[rows_with_matches, column] = string_to_replace

    # let us know the function's done
    print("All done!")

"""Function Definition:

replace_matches_in_column(df, column, string_to_match, min_match=95): This function takes four parameters:
df: The dataframe where replacements will occur.
column: The column within the dataframe where you want to check for matches.
string_to_match: The string you want to find matches for.
min_match: The minimum similarity percentage to consider a string a match (default is 95%).
Extract Unique Strings:

strings = df[column].unique(): Retrieves all unique values from the specified column of the dataframe.
Find Close Matches:

matches = fuzzywuzzy.process.extract(string_to_match, strings, limit=5): Uses fuzzy string matching to find the top 5 strings from strings that are most similar to string_to_match.
Filter Matches by Similarity Threshold:

close_matches = [matches[0] for matches in matches if matches[1] >= min_match]: Filters out the matches to include only those with a similarity score greater than or equal to min_match. It creates a list of just these matching strings.
Identify Rows with Close Matches:

rows_with_matches = df[column].isin(close_matches): Creates a boolean series that is True for rows where the value in the specified column is in the close_matches list.
Replace Matched Rows:

df.loc[rows_with_matches, column] = string_to_match: Replaces the values in the matched rowsâ€™ specified column with string_to_match.
Completion Message:

print("All done!"): Prints a message indicating that the function has completed its execution.

## Fix Departments:
"""

replace_matches_in_column(df=professors, column='Department', string_to_match="computer sciences",string_to_replace='computer sciences', limit=100, min_match = 60)
professors.Department.unique()

"""Now that we have a function, we can put it to the test!"""

replace_matches_in_column(df=professors, column='Department', string_to_match="computer engineering",string_to_replace='computer engineering', limit=300, min_match = 75)
professors.Department.unique()

replace_matches_in_column(df=professors, column='Department', string_to_match="information technology",string_to_replace='information technology',limit=300, min_match = 90)
professors.Department.unique()

professors['Department'].unique()

"""## Fix Countries"""

# use the function we just wrote to replace close matches to "south korea" with "south korea"
replace_matches_in_column(df=professors, column='Country', string_to_match="south korea",string_to_replace='South Korea',limit=100, min_match = 95)
professors.Country.unique()

# use the function we just wrote to replace close matches to "south korea" with "south korea"
replace_matches_in_column(df=professors, column='Country', string_to_match="usa",string_to_replace='USA',limit=100, min_match = 75)
professors.Country.unique()

"""And now let's check the unique values in our "Country" column again and make sure we've tidied up "south korea" correctly."""

# use the function we just wrote to replace close matches to "south korea" with "south korea"
replace_matches_in_column(df=professors, column='Country', string_to_match="germany",string_to_replace='Germany',limit=100, min_match=100)
professors.Country.unique()

# get all the unique values in the 'Country' column
countries = professors['Country'].unique()

# sort them alphabetically and then take a closer look
countries.sort()
countries

professors['Country'].value_counts()

"""## Fix Terminal Degree"""

# use the function we just wrote to replace close matches to "south korea" with "south korea"
replace_matches_in_column(df=professors, column='Terminal Degree', string_to_match="M",string_to_replace='MS', limit=500, min_match = 90)
professors['Terminal Degree'].unique()

# use the function we just wrote to replace close matches to "south korea" with "south korea"
replace_matches_in_column(df=professors, column='Terminal Degree', string_to_match="B",string_to_replace='BS', limit=500, min_match = 60)
professors['Terminal Degree'].unique()

# use the function we just wrote to replace close matches to "south korea" with "south korea"
replace_matches_in_column(df=professors, column='Terminal Degree', string_to_match="P",string_to_replace='PhD', limit=500, min_match = 60)
professors['Terminal Degree'].unique()

professors['Terminal Degree'].unique()

"""## Fix Designation"""

professors['Designation'].unique()

# use the function we just wrote to replace close matches to "south korea" with "south korea"
replace_matches_in_column(df=professors, column='Designation', string_to_match="Associate",string_to_replace='Associate Professor', limit=500, min_match = 90)
professors['Designation'].unique()

# use the function we just wrote to replace close matches to "south korea" with "south korea"
replace_matches_in_column(df=professors, column='Designation', string_to_match="Assistant",string_to_replace='Assistant Professor', limit=500, min_match = 90)
professors['Designation'].unique()

# use the function we just wrote to replace close matches to "south korea" with "south korea"
replace_matches_in_column(df=professors, column='Designation', string_to_match="Lecturer",string_to_replace='Lecturer', limit=500, min_match = 90)
professors['Designation'].unique()

# use the function we just wrote to replace close matches to "south korea" with "south korea"
replace_matches_in_column(df=professors, column='Designation', string_to_match="Instruct",string_to_replace='Lecturer', limit=500, min_match = 89)
professors['Designation'].unique()

# use the function we just wrote to replace close matches to "south korea" with "south korea"
replace_matches_in_column(df=professors, column='Designation', string_to_match="Teach",string_to_replace='Lecturer', limit=500, min_match = 90)
professors['Designation'].unique()

# use the function we just wrote to replace close matches to "south korea" with "south korea"
replace_matches_in_column(df=professors, column='Designation', string_to_match="Faculty",string_to_replace='Faculty', limit=500, min_match = 90)
professors['Designation'].unique()

# use the function we just wrote to replace close matches to "south korea" with "south korea"
replace_matches_in_column(df=professors, column='Designation', string_to_match="Chair",string_to_replace='Chairman', limit=500, min_match = 90)
professors['Designation'].unique()

# use the function we just wrote to replace close matches to "south korea" with "south korea"
replace_matches_in_column(df=professors, column='Designation', string_to_match="Dean",string_to_replace='Academic Leadership', limit=500, min_match = 90)
professors['Designation'].unique()

# use the function we just wrote to replace close matches to "south korea" with "south korea"
replace_matches_in_column(df=professors, column='Designation', string_to_match="HoD",string_to_replace='Academic Leadership', limit=500, min_match = 90)
professors['Designation'].unique()

# use the function we just wrote to replace close matches to "south korea" with "south korea"
replace_matches_in_column(df=professors, column='Designation', string_to_match="Head",string_to_replace='Academic Leadership', limit=500, min_match = 90)
professors['Designation'].unique()

# use the function we just wrote to replace close matches to "south korea" with "south korea"
replace_matches_in_column(df=professors, column='Designation', string_to_match="Supervisor",string_to_replace='Faculty', limit=500, min_match = 51)
professors['Designation'].unique()

# use the function we just wrote to replace close matches to "south korea" with "south korea"
replace_matches_in_column(df=professors, column='Designation', string_to_match="Manager",string_to_replace='Staff', limit=500, min_match = 90)
professors['Designation'].unique()

# use the function we just wrote to replace close matches to "south korea" with "south korea"
replace_matches_in_column(df=professors, column='Designation', string_to_match="Engineer",string_to_replace='Staff', limit=500, min_match = 90)
professors['Designation'].unique()

# use the function we just wrote to replace close matches to "south korea" with "south korea"
replace_matches_in_column(df=professors, column='Designation', string_to_match="Officer",string_to_replace='Faculty', limit=500, min_match = 90)
professors['Designation'].unique()

# use the function we just wrote to replace close matches to "south korea" with "south korea"
replace_matches_in_column(df=professors, column='Designation', string_to_match="Controller",string_to_replace='Academic Leadership', limit=500, min_match = 90)
professors['Designation'].unique()

# use the function we just wrote to replace close matches to "south korea" with "south korea"
replace_matches_in_column(df=professors, column='Designation', string_to_match="Principal",string_to_replace='Academic Leadership', limit=500, min_match = 90)
professors['Designation'].unique()

# use the function we just wrote to replace close matches to "south korea" with "south korea"
replace_matches_in_column(df=professors, column='Designation', string_to_match="Chancellor",string_to_replace='Academic Leadership', limit=500, min_match = 90)
professors['Designation'].unique()

professors.columns

columns = ['Department', 'Designation', 'Terminal Degree', 'Country']
for col in columns:
  plt.figure(figsize=(10, 6))
  sns.histplot(y=professors[col])
  plt.show()